!function(){"use strict";class e{constructor(e,t,s,n,r){let{name:o,link:i,_id:a,isLiked:l}=e;this._name=o,this._link=i,this._id=a,this._cardSelector=t,this._handleImageClick=s,this._handleCardDelete=n,this._handleLikeClick=r,this._isliked=l}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleCardDelete({id:this._id,cardElement:this._cardElement})})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}toggleLikeIcon(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}getView(){return this._cardElement=document.querySelector("#card-template").content.querySelector(".card").cloneNode(!0),this._setEventListeners(),this._cardElement.querySelector(".card__title").textContent=this._name,this._cardElement.querySelector(".card__image").src=this._link,this._cardElement.querySelector(".card__image").alt=this._name,this._cardElement}_setEventlisteners(){}}var t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButttonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._inputEls=t.querySelectorAll(this._inputSelector),this._formElement=t,this._submitButton=t.querySelector(this._submitButttonSelector)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.remove(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_toggleButtonState(){this._hasInvalidInput(this._inputEls)?this.disableButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_hasInvalidInput(){return!Array.from(this._inputEls).every((e=>e.validity.valid))}_setEventlisteners(){this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventlisteners()}};class s{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class n{constructor(e){let{modalSelector:t}=e;this._modalElement=document.querySelector(t),this._closeButton=this._modalElement.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this),this._handleCloseOverlay=this._handleCloseOverlay.bind(this)}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleCloseOverlay(e){e.target===this._modalElement&&this.close()}setEventListeners(){this._modalElement.querySelector(".modal__close").addEventListener("click",(()=>this.close())),this._modalElement.addEventListener("click",this._handleCloseOverlay)}}var r=class extends n{constructor(e,t){super({modalSelector:e}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._handleFormSubmit=t}close(){super.close()}getInputValues(){const e=this._modalForm.querySelectorAll("input"),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault();const t=this.getInputValues();this._handleFormSubmit(t),this._modalForm.reset()})),super.setEventListeners()}};const o={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};const i=new class{constructor(e){let{baseUrl:t,authToken:s}=e;this._baseUrl=t,this._authToken=s}getUsers=()=>fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)));editUserInfo=(e,t)=>fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{"Content-Type":"application/json",authorization:this._authToken},body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(new Error(`Error: ${e.status}`)))).catch((e=>console.error("Request failed",e)));updateAvatar=e=>fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)));getCards=()=>fetch(`${this._baseUrl}/cards`,{method:"GET",headers:{authorization:this._authToken}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)));addCard=e=>{let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))};deleteCard=e=>fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)));likeCard=(e,t,s)=>fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)));dislikeCard=(e,t,s)=>fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}({baseUrl:"https://around-api.en.tripleten-services.com/v1",authToken:"d88a2b9a-3c17-46af-b0b4-5a460d3316a6"});let a;i.getCards().then((e=>{console.log(e),a=new s({items:e,renderer:e=>{const t=C(e);a.addItem(t)}},".cards__list"),a.renderItems()}));const l=document.querySelector("#profile-edit-button"),c=document.querySelector("#profile-edit-modal"),d=document.querySelector("#profile-title-input"),h=document.querySelector("#profile-description-input"),m=document.querySelector(".profile__add-button"),u=document.querySelector("#add-new-card-modal").querySelector(".modal__form"),_=c.querySelector(".modal__form");document.querySelector("#modal-preview").querySelector(".modal__close");const p=new class{constructor(e){let{nameSelector:t,descriptionSelector:s,avatarSelector:n}=e;this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(s),this._avatarElement=document.querySelector(n)}getUserInfo(){return{name:this._nameElement.textContent,description:this._descriptionElement.textContent}}setUserInfo(e){let{name:t,description:s}=e;this._nameElement.textContent=t,this._descriptionElement.textContent=s}setAvatar(e){this._avatarElement.src=e}}({nameSelector:".profile__title",descriptionSelector:".profile__description",avatarSelector:".profile__image"});function E(e){e._isLiked?i.dislikeCard(e._id).then((()=>{e.toggleLikeIcon()})):i.likeCard(e._id).then((()=>{e.toggleLikeIcon()}))}i.getUsers().then((e=>{p.setUserInfo({name:e.name,description:e.about}),p.setAvatar(e.avatar)}));const v=new r("#avatar-modal",(e=>{let{url:t}=e;i.updateAvatar(t).then((e=>{p.setAvatar(e.avatar),avatarForm.reset(),v.close()})).catch((e=>{console.error("Failed to update avatar:",e)}))}));v.setEventListeners(),document.querySelector(".profile__image-btn").addEventListener("click",(()=>{v.open()}));const S=new r("#profile-edit-modal",(function(e){const t=e.title,s=e.description;i.editUserInfo(t,s),p.setUserInfo({name:t,description:s}),S.close()}));S.setEventListeners();const y=new r("#add-new-card-modal",(function(e){const t={name:e.title,link:e.url},s=C(t);i.addCard(t).then((e=>{a.addItem(s)})),y.close(),u.reset(),g.disableButton()}));y.setEventListeners(),l.addEventListener("click",(()=>{const{name:e,description:t}=p.getUserInfo();d.value=e,h.value=t,S.open()})),m.addEventListener("click",(()=>{y.open()}));const k=new class extends n{constructor(e){let{modalSelector:t}=e;super({modalSelector:t}),this._modalImage=this._modalElement.querySelector(".modal__image"),this._modalCaption=this._modalElement.querySelector(".modal__caption")}open(e){let{name:t,link:s}=e;this._modalImage.src=s,this._modalImage.alt=t,this._modalCaption.textContent=t,super.open()}}({modalSelector:"#modal-preview"});function b(e){k.open({name:e.name,link:e.link})}function C(t){return new e(t,"#card-template",b,L,E).getView()}k.setEventListeners();const f=new class extends n{constructor(e){super({modalSelector:e})}setSubmitFunction(e){this._submitFunction=e}setEventListeners(){console.log(123),this._modalElement.querySelector(".modal__form").addEventListener("submit",(e=>{e.preventDefault(),this._submitFunction()})),super.setEventListeners()}}("#delete-modal");function L(e){f.open(),f.setSubmitFunction((()=>{i.deleteCard(e.id).then((()=>{e.cardElement.remove(),f.close()}))}))}f.setEventListeners();const g=new t(o,u);g.enableValidation(),new t(o,_).enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,